/**
 * @author <a href="https://github.com/vivekVells">Vivek Vellaiyappan Surulimuthu</a>
 * @version java 1.8
 * file: AESCipher.java
 * description: AES implementation prep file | implemented the AES round keys - 
 * author: Vivek Vellaiyappan Surulimuthu
 * course: MSCS630S
 * assignment: Lab 4
 * due date: 05-04-2018
 */ 

/**
 * AESCipher class 
 *
 * This class implements the functions to calculate the round keys for AES
 */
public class AESCipher {
  private static int[][] sBox = {
    {0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76},
    {0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0},
    {0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15},
    {0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75},
    {0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84},
    {0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF},
    {0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8},
    {0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2},
    {0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73},
    {0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB},
    {0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79},
    {0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08},
    {0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A},
    {0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E},
    {0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF},
    {0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16}
  };

  private static int rcon[] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
  };

  /**
   * getRoundKeysHex
   * 
   * This function will return the inputted keys in hex values after the rounds
   */
  public String[] getRoundKeysHex(String keyHexArg) {
    return aesRoundKeys(keyHexArg);
  }


  /**
   * aesRoundKeys
   * 
   * To create round keys 
   *
   * @param: arg - get string input
   * @return: returns key hex array
   */
  public String[] aesRoundKeys(String arg) {
    int[][] w = new int[4][44];    
    int[][] keyMatrix = keyMatrix(arg);
    String[] roundKeysHex = null;

    for (int i = 0; i < 4; i++) {
      for (int j = 0; j < 4; j++) {
        w[i][j] = keyMatrix[i][j];
      }
    }

    for (int j = 4; j < 44; j++){
      if (j % 4 != 0){
        int [] j1 = getMtxCol(w,j-1);
        int [] j2 = getMtxCol(w,j-4);
        
        for (int i = 0; i < 4; i++){
          w[i][j] = j2[i]^j1[i];
        }
      }else{
        int [] j3 = getMtxCol(w,j-4);
        int[] vector = getMtxCol(w, j-1);
        int firstElement = vector[0];

        System.arraycopy(vector, 1, vector, 0, vector.length - 1);
        vector[vector.length -1] = firstElement;
        subBytes(vector);
        subByteOne(vector, (int)Math.floor(j/4));
        
        for (int i = 0; i < 4; i++ ){
          w[i][j] = j3[i]^vector[i];
        }
      }
    }
    roundKeysHex = matrixToString(w);
    return roundKeysHex;
  }

  /**
   * getSBoxValue
   *
   * This function reads value from sBox
   * To get the value from sBox based on the received arg
   *
   * @param: arg - integer arg
   * @return: returns the sBox value based on the received arg
   */
  private int getSBoxValue(int arg) {
    return sBox[arg/16][arg%16];
  }

  /**
   * subBytes
   *
   * To replace all elements in given arg with sBox value
   *
   * @param: vector array 
   * @return: returns replaced elements with sBox value
   */
  private void subBytes(int[] vector) {
    for (int i = 0; i < vector.length; i++) {
      vector[i] = getSBoxValue(vector[i]);
    }
  }

  /**
   * subByteOne
   *
   * Function to replace 1st element 
   * 
   * @param: vector - Array value to be replaced
   * @param: round - round for key generation
   */
  private void subByteOne(int[] vector, int round){
    vector[0] = vector[0]^aesRcon(round);
  }

  /**
   * aesRcon
   *
   * Function to read value from rcon array
   * 
   * @param: round - get round index value
   * @return: returns the value of aesRcon
   */
  private int aesRcon(int round) {
    return rcon[round];
  }

  /**
   * keyMatrix
   * 
   * Generates the key matrix
   * 
   * @param: input - received input
   * @return: returns the key matrix
   */
  private int[][] keyMatrix(String input){
    int [][] keyMatrix = new int[4][4];
    String[] inputArr =  input.split("(?<=\\G..)");

    for(int i = 0, indexCount = 0; i < 4; i++){
      for(int j = 0; j < 4; j++){
        keyMatrix[j][i] = Integer.decode("0x" + inputArr[indexCount++]);
      }
    }

    return keyMatrix;
  }

  /**
   * getMtxCol
   *
   * To get the column value from given matrix
   *
   * @param: keyMatrix, index
   * @return: returns the column value of given matrxi
   */
  private int[] getMtxCol(int[][] kMatrix, int index){
    int[] column = new int[4];

    for (int j = 0; j < 4; j++) {
      column[j] = kMatrix[j][index];
    }

    return column;
  }

  /**
   * matrixToString
   *
   * retruns String of the converted matrix values
   *
   * @return: returns the matrix to string value
   */
  private String[] matrixToString(int[][] matrix){
    StringBuilder sb = new StringBuilder();

    for (int i = 0; i < 44; i++) {
      for (int j = 0; j < 4; j++) {
        sb.append(String.format("%02x",matrix[j][i]));
      }
    }
    return sb.toString().toUpperCase().split("(?<=\\G.{32})");
  }
}

/*
Program Execution:
Vivek-Pc@kev MINGW64 /e/Marist/Semester2/Cryptography/lab/4 (master)
$ javac AESCipher.java
Vivek-Pc@kev MINGW64 /e/Marist/Semester2/Cryptography/lab/4 (master)
$ javac DriverAES.java
Vivek-Pc@kev MINGW64 /e/Marist/Semester2/Cryptography/lab/4 (master)
$ java DriverAES < InputDriverAES.txt
Input:
5468617473206D79204B756E67204675
Output:
5468617473206D79204B756E67204675E232FCF191129188B159E4E6D679A29356082007C71AB18F76435569A03AF7FAD2600DE7157ABC686339E901C3031EFBA11202C9B468BEA1D75157A01452495BB1293B3305418592D210D232C6429B69BD3DC287B87C47156A6C9527AC2E0E4ECC96ED1674EAAA031E863F24B2A8316A8E51EF21FABB4522E43D7A0656954B6CBFE2BF904559FAB2A16480B4F7F1CBD828FDDEF86DA4244ACCC0A4FE3B316F26
*/